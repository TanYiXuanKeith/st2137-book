{
  "hash": "863f0473f4aee0746b91ade6c1a8c274",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to SAS\"\n---\n\n\n\n\n\n\n\n\n## Introduction\n\nSAS (Statistical Analysis System) is a software that was originally created in\nthe 1960s. Today, it is widely used by statisticians working in biostatistics\nand the pharmaceutical industries. Unlike Python and R, it is a proprietary \nsoftware. The full license is quite expensive for a low-usage case such as ours.\nThankfully, there is a free web-based version that we can use for our course.\n\n## Registering for a SAS Studio Account\n\nThe first step is to create a SAS profile: Use your *NUS email address* to register\nand create your SAS profile using [this link](https://www.sas.com/profile/ui/#/create).\n\nOnce you have verified your account using the email that would be sent to you, \nthe [following link](https://welcome.oda.sas.com/) should take you to the login \npage shown in @fig-sas-1.\n\n![SAS Studio Login](figs/sas_welcome-01.png){#fig-sas-1 fig-alt=\"SAS login\" fig-align=\"center\" width=70%}\n\nSubsequently logging in should take you to the landing page, where you can begin \nwriting SAS code and using SAS. This interface can be seen in @fig-sas-2.\n\n![SAS Studio](figs/sas_welcome-02.png){#fig-sas-2 fig-alt=\"SAS Studio\" fig-align=\"center\" width=70%}\n\n\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n\n\n\n\n## An Overview of SAS Language\n\nThe SAS language is not a fully-fledged programming language like Python is, or\neven R. For the most part, we are going to capitalise on the point-and-click interface\nof SAS Studio in our course. However, even so, it is good to understand a little \nabout the language so that we can modify the options for different procedures as \nnecessary.\n\nA SAS program is a sequence of statements executed in order. Keep in mind that:\n\n> Every SAS statement ends with a semicolon.\n\nSAS programs are constructed from two basic building blocks: DATA steps and PROC\nsteps. A typical program starts with a DATA step to create a SAS data set and then \npasses the data to a PROC step for processing. \n\n\n::: {style=\"background-color: #D5D1D164; padding: 20px\" #exm-sas-1}\n\n### Creating and Printing a Dataset\n\nHere is a simple program that converts miles to kilometres in a DATA step and\nthen prints the results with a PROC step:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA distance;\n\tMiles = 26.22;\n\tKilometer = 1.61 * Miles;\n\nPROC PRINT DATA=distance;\nRUN;\n```\n:::\n\n\n\n\n\n\nTo run the above program, click on the \"Running Man\" icon in SAS studio. You \nshould obtain the output shown in @fig-sas-3.\n\n![SAS output](figs/sas_ex-1.png){#fig-sas-3 fig-alt=\"SAS output\" fig-align=\"center\" width=70%}\n\nThis dataset has only one observation (row).\n\n:::\n\n*Data* steps start with the DATA keyword. This is followed by the name for the \ndataset. *Procedures* start with PROC followed by the name of the particular \nprocedure (e.g. PRINT, SORT or PLOT) you wish to run on the dataset. Most SAS \nprocedures have only a handful of possible statements. A step ends when SAS \nencounters a new step (marked by a DATA or PROC statement) or a RUN statement.\nRUN statements are not part of a DATA or PROC step; they are global statements. \n\n::: {style=\"background-color: #D5D1D164; padding: 20px\" #exm-sas-2}\n\n### Creating a Dataset Inline\n\nThe following program explicitly creates a dataset within the DATA step.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n/*CREATING DATA MANUALLY:; */\n\nDATA ex_1;\nINPUT subject gender $ CA1 CA2 HW $;\nDATALINES;\n10 m 80 84 a\n7 m 85 89 a\n4 f 90 86 b\n20 m 82 85 b\n25 f 94 94 a\n14 f 88 84 c\n;\n\nPROC MEANS DATA=ex_1;\nVAR CA1 CA2;\nRUN;\n```\n:::\n\n\n\n\n\n\nThe output for the above code is shown in @fig-sas-4a and @fig-sas-4b.\n\n::: {layout-nrow=2}\n![Dataset output](figs/sas_ex-2a.png){#fig-sas-4a fig-alt=\"DATA output\" fig-align=\"center\" width=70%}\n\n![Proc output](figs/sas_ex-2b.png){#fig-sas-4b fig-alt=\"PROC output\" fig-align=\"center\" width=70%}\n:::\n\nIn the statements above, the `$`'s in the INPUT statement inform SAS that the \npreceding variables (gender and HW) are character. Note how the semi-colon for the \nDATALINES appears *after* all the data has been listed.\n\nPROC MEANS creates basic summary statistics for the variables listed.\n:::\n\nTo review, there are only 2 types of steps in SAS programs:\n\n::: {layout-ncol=2}\n### DATA steps\n\n- begin with DATA statements.\n- read and modify data.\n- create a SAS dataset.\n\n### PROC steps\n\n- begin with PROC statements.\n- perform specific analysis or function.\n- produce reports or results.\n:::\n\n## Basic Rules for SAS Programs\n\n### For SAS statements\n\n* All SAS statements (except those containing data) must end with a semicolon (;).\n* SAS statements typically begin with a SAS keyword. (DATA, PROC). \n* SAS statements are not case sensitive, that is, they can be entered in lowercase, \n  uppercase, or a mixture of the two.\n  * Example : SAS keywords (DATA, PROC) are not case sensitive\n* A delimited comment begins with a forward slash-asterisk (/*) and ends with\n  an asterisk-forward slash (*/). All text within the delimiters is ignored by\n  SAS.\n\n### For SAS names\n\n* All names must contain between 1 and 32 characters.\n* The first character appearing in a name must be a letter (A, B, ... Z, a, b, ..., z) \n  or an underscore ( ). Subsequent characters must be letters, numbers, or underscores. \n  That is, no other characters, such as $, %, or & are permitted.\n* Blanks also cannot appear in SAS names.\n* SAS names are not case sensitive, that is, they can be entered in lowercase, \n  uppercase, or a mixture of the two. (SAS is only case sensitive within quotation marks.)\n\n### For SAS variables\n\n* If the variable in the INPUT statement is followed by a dollar sign ($), SAS\n  assumes this is a character variable. Otherwise, the variable is considered as a\n  numeric variable.\n\n\n## Reading Data into SAS\n\nIn this topic, we shall introduce a new dataset, also from the UCI Machine \nLearning repository. \n\n::: {style=\"background-color: #D5D1D164; padding: 20px\" #exm-bike-2}\n\n### Bike Rentals\n\\index{Bike rentals!description}\n\nThe dataset was collected by the authors in @fanaee2013bike. It contains\ninformation on bike-sharing rentals in Washington D.C. USA for the years 2011\nand 2012, along with measurements of weather. The original dataset contained\nhourly and daily aggregated data. For our class, we use a re-coded version of \nthe daily data. Our dataset can be found on Canvas as `bike2.csv`.\n\nHere is the data dictionary:\n\n| Field       | Description                                                                                      |\n|-------------|--------------------------------------------------------------------------------------------------|\n| instant     | Record index                                                                                     |\n| dteday      | Date                                                                                             |\n| season      | spring, summer, fall, winter)                                                |\n| yr          | Year (0: 2011, 1: 2012)                                                                           |\n| mnth        | Abbreviated month                                                                                   |\n| holiday     | Whether the day is a holiday or not |\n| weekday     | Abbreviated day of the week                                                   |\n| workingday  | yes: If day is neither weekend nor holiday is 1, no: Otherwise   |\n| weathersit  | Weather situation: clear: Clear, Few clouds, Partly cloudy, Partly cloudy; mist: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist; light_precip: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds; heavy_precip: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog |\n| temp        | Normalized temperature in Celsius. Divided by 41 (max)                         |\n| atemp       | Normalized feeling temperature in Celsius. Divided by 50 (max)                |\n| hum         | Normalized humidity. Divided by 100 (max)                                |\n| windspeed   | Normalized wind speed. Divided by 67 (max)                                   |\n| casual      | Count of casual users                                                    |\n| registered  | Count of registered users                                              |\n| cnt         | Count of total rental bikes including both casual and registered             |\n\nOur first step will be to load the dataset into SAS Studio.\n\n:::\n\n\n## Uploading and Using Datasets\n\nTo use our own datasets on SAS Studio, we have to execute the following steps:\n\n1. Create a new library. In SAS, a library is a collection of datasets. If \n   you already have a library created, you can simply import datasets into it.\n   The default library on SAS is called `WORK`. However, the datasets will be \n   purged every time you sign out. Hence it is better to create a new one.\n2. Import your dataset (csv, xlsx, etc.) into the library.\n3. After this, the data will be available for use with the reference name\n   `<library-name>.<dataset-name>`.\n   \nFrom the \"Libraries\" menu on the left of SAS studio, click on the \"New library\" \nicon (the one circled in red in @fig-sas-lib-1), and create a new library called\n\"ST2137\". You can use the default suggested path for the library.\n\n::: {layout-ncol=2}\n![New library](figs/sas_library-02.png){#fig-sas-lib-1}\n\n![Upload data](figs/sas_servers_files-02.png){#fig-sas-lib-2}\n   \n:::\nNow expand the menu for \"Server Files and Folders\" and upload `bike2.csv` file\nto SAS, using the circled icon in @fig-sas-lib-2.\n\n\nFinally, right-click on the top of the main Studio area (where we write code)\nand select \"New Import Data\". Select the `bike2.csv` that has just been uploaded,\nand modify the OUTPUT DATA settings to Library `ST2137` and Data set name \n`BIKE2`. Click on the running man, and your dataset is now ready for use in \nSAS studio!\n\n## Summarising Numerical Data\n\nThe SAS routines we are going to work with can be found in the \"Tasks and Utilities\"\nsection (see highlighted tasks in @fig-sas-tasks-01).\n\n![Common ST2137 Tasks](figs/sas_tasks-01.png){#fig-sas-tasks-01 fig-align=\"center\" width=30%}\n\n### Numerical Summaries\n\n::: {style=\"background-color: #D5D1D164; padding: 20px\" #exm-bike-summ-1}\n\n### 5-number Summaries\n\\index{Bike rentals!numerical summaries}\n\nWe expect that the total count of users will vary by the seasons. Hence, we begin\nby computing five-number summaries for each season.\n\nUnder Tasks, go to Statistcs > Summary Statistics. Select `cnt` as the analysis\nvariable, and `season` as the classification variable. Under the options tab,\nselect the lower and upper quartiles, along with comparative boxplots. The\noutput should look like this @fig-sas-bike-02:\n\n![Summaries, Bike data](figs/sas_bike_summaries-01.png){#fig-sas-bike-02 fig-align=\"center\" width=\"60%\"}\n\nWe observe that the median count is highest for fall, followed by summer, winter\nand lastly spring. The spreads, as measured by IQR, are similar across the\nseasons: approximately 2000 users. In the middle 50%, the count distribution for\nspring is the most right-skewed.\n\n:::\n\n\n### Scatter Plots\n\n::: {style=\"background-color: #D5D1D164; padding: 20px\" #exm-bike-scatter-1}\n\n### Casual vs Registered Scatterplot\n\\index{Bike rentals!scatterplot}\n\nTo create a scatterplot in SAS, go to Tasks > Graphs > Scatter Plot.\n\nSpecify `casual` on the x-axis, `registered` on the y-axis, and `workingday` as \nthe Group. You should observe the plot created @fig-sas-bike-01:\n\n\n![Scatter plot, Bike Data](figs/sas_bike_scatter-01.png){#fig-sas-bike-01 fig-align=\"center\" width=\"60%\"}\n\nWe can see that there seem to be two different relationships between the \ncounts of casual and registered users. The two relationships correspond to whether\nit as a working day or not.\n\n:::\n\n### Histograms\n\n::: {style=\"background-color: #D5D1D164; padding: 20px\" #exm-bike-hist-1}\n\n### Casual Users Distribution\n\\index{Bike rentals!histograms}\n\nNow suppose we focus on casual users, and study the distribution of counts \nby whether a day is a working day or not. To create a histogram, go to \nTasks > Graph > Histogram. Select `casual` as the analysis variable, and \n`workingday` as the group variable. \n\n![Histograms, Bike Data](figs/sas_bike_hist-01.png){#fig-sas-hist-01 fig-align=\"center\" width=35%}\n\nFrom @fig-sas-hist-01, we can see that the distribution is right-skewed in both cases. However, the\nrange of counts for non-working days extends further, to about 3500. \n\n:::\n\n### Boxplots\n\\index{Bike rentals!boxplots}\n\n::: {style=\"background-color: #D5D1D164; padding: 20px\" #exm-bike-box-1}\n\n### Boxplots for Casual Users, by Season\n\nIn @exm-bike-summ-1, we observed that total counts vary by users, and in \n@exm-bike-hist-1, we observed that working days seem to have fewer casual\nusers. Let us investigate if this difference is related to season.\n\nTo create boxplots, go to Tasks > Box Plot. Select `casual` as the analysis \nvariable, `season` as the category and `workingday` as the subcategory. You should\nobtain a plot like this @fig-sas-box-01:\n\n![Boxplots, Bike Data](figs/sas_bike_boxplot-01.png){#fig-sas-box-01 fig-align=\"center\" width=\"60%\"}\n\nIn order to order the seasons according to the calendar, I had to add this line \nto the code:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproc sgplot data=ST2137.BIKE2;\n\tvbox casual / category=season group=workingday grouporder=ascending;\n\txaxis values=('spring' 'summer' 'fall' 'winter');\n\tyaxis grid;\nrun;\n```\n:::\n\n\n\n\n\n\nThere is little insight from the previous two examples. However, now try the \nsame plots, but on the log scale (modify the APPEARANCE tab and re-run).  You should\nnow obtain @fig-sas-box-02:\n\n![Boxplots log scale, Bike Data](figs/sas_bike_boxplot-02.png){#fig-sas-box-02 fig-align=\"center\" width=\"60%\"}\n\nNow, we can observe that the difference within each season, is constant across \nseasons. Because the difference in logarithms is constant, it means that, \non the original scale, it is a constant multiplicative factor that increases counts \nfrom workingday to non-working day.\n\nWe have arrived at a more succint representation of the relationship by using\nthe log transform.\n\n:::\n\n### QQ-plots\n\\index{Bike rentals!QQ plots}\n\n::: {style=\"background-color: #D5D1D164; padding: 20px\" #exm-bike-qq-1}\n\n### Normality Check for Humidity\n\nTo create QQ-plots, we go to Tasks > Statistics > Distribution Analysis. \n\nSelect `hum` for the analysis variable. Under options, add the normal curve, the \nkernel density estimate, and the Normal quantile-quantile plot. You should obtain\nthe following two charts:\n\n::: {layout-ncol=2}\n![Histogram for humidity](figs/sas_bike_qq-01.png)\n\n![QQ-plot for humidity](figs/sas_bike_qq-02.png)\n:::\n\nThe plot shows that humidity values are quite close to a Normal distribution, apart \nfrom a single observation on the left.\n\n:::\n\n## Categorical Data \n\nWe now turn to categorical data methods with SAS. We return to the dataset on \nstudent performance that we used in the topic on summarising data. Upload and \nstore `student-mat.csv` as ST2137.STUD_PERF on the SAS Studio website.\n\n::: {style=\"background-color: #D5D1D164; padding: 20px\" #exm-stud-chisq-1}\n\n### $\\chi^2$ Test for Independence\n\\index{Bike rentals!chi-squared test}\n\nFor a test of independence of `address` and `paid`, go to Tasks > Table Analysis,\nand select:\n\n* `address` as the column variable\n* `paid` as the row variable.\n* Under OPTIONS, check the \"Chi-square statistics\" box.\n\nThe following output should enable you to perform the test (@fig-sas-chisq-01 and \n@fig-sas-chisq-02).\n\n::: {layout=\"[[1,1], [1]]\"}\n![Observed & Expected Counts](figs/sas_stud_chisq-01.png){#fig-sas-chisq-01}\n\n![Test statistic, p-value](figs/sas_stud_chisq-02.png){#fig-sas-chisq-02}\n\n![Mosaic Plot](figs/sas_stud_mosaic-01.png){#fig-sas-mos-01}\n\n\n:::\n\n:::\n\nFor measures of association, we only need to select the option for \"Measures of Association\"\nto generate the Kendall $\\tau_b$ that we covered earlier.\n\n::: {style=\"background-color: #D5D1D164; padding: 20px\" #exm-stud-chisq-1}\n\n### Kendall $\\tau$ for `Walc` and `Dalc`\n\\index{Student performance!Kendall's tau}\n\nOnce we load the data ST2137.STUD_PERF, we go to Tasks > Table Analysis. After \nselecting the two variables, we check the appropriate box to obtain @fig-sas-tau-01.\n\n![Walc vs Dalc](figs/sas_stud_tau-01.png){#fig-sas-tau-01 fig-align=\"center\" width=60%}\n\nYou may observe that the particular associations computed and returned are similar\nto those by the `Desc` R package that we used in @exm-chest-pain-4.\n\n:::\n\n## References \n\n## Website References {#sec-web-ref-06}\n\n1. [SAS account sign-up](https://www.sas.com/profile/ui/#/create) Use this link to \n   sign up for a SAS account.\n2. [SAS Studio link](https://welcome.oda.sas.com/) Once you have activated your \n   account, use this link to login to your SAS studio online.\n3. [SAS Studio Help](https://documentation.sas.com/doc/en/sasstudiocdc/v_048/webeditorcdc/sasstudiowlcm/home.htm) This link contains help on SAS studio features and commands.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}