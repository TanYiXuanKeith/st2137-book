[
  {
    "objectID": "06-intro_to_sas.html",
    "href": "06-intro_to_sas.html",
    "title": "6  Introduction to SAS",
    "section": "",
    "text": "6.1 Introduction\nSAS (Statistical Analysis System) is a software that was originally created in the 1960s. Today, it is widely used by statisticians working in biostatistics and the pharmaceutical industries. Unlike Python and R, it is a proprietary software. The full license is quite expensive for a low-usage case such as ours. Thankfully, there is a free web-based version that we can use for our course.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to SAS</span>"
    ]
  },
  {
    "objectID": "06-intro_to_sas.html#registering-for-a-sas-studio-account",
    "href": "06-intro_to_sas.html#registering-for-a-sas-studio-account",
    "title": "6  Introduction to SAS",
    "section": "6.2 Registering for a SAS Studio Account",
    "text": "6.2 Registering for a SAS Studio Account\nThe first step is to create a SAS profile: Use your NUS email address to register and create your SAS profile using this link.\nOnce you have verified your account using the email that would be sent to you, the following link should take you to the login page shown in Figure 6.1.\n\n\n\n\n\n\nFigure 6.1: SAS Studio Login\n\n\n\nSubsequently logging in should take you to the landing page, where you can begin writing SAS code and using SAS. This interface can be seen in Figure 6.2.\n\n\n\n\n\n\nFigure 6.2: SAS Studio",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to SAS</span>"
    ]
  },
  {
    "objectID": "06-intro_to_sas.html#an-overview-of-sas-language",
    "href": "06-intro_to_sas.html#an-overview-of-sas-language",
    "title": "6  Introduction to SAS",
    "section": "6.3 An Overview of SAS Language",
    "text": "6.3 An Overview of SAS Language\nThe SAS language is not a fully-fledged programming language like Python is, or even R. For the most part, we are going to capitalise on the point-and-click interface of SAS Studio in our course. However, even so, it is good to understand a little about the language so that we can modify the options for different procedures as necessary.\nA SAS program is a sequence of statements executed in order. Keep in mind that:\n\nEvery SAS statement ends with a semicolon.\n\nSAS programs are constructed from two basic building blocks: DATA steps and PROC steps. A typical program starts with a DATA step to create a SAS data set and then passes the data to a PROC step for processing.\n\nExample 6.1 (Creating and Printing a Dataset) Here is a simple program that converts miles to kilometres in a DATA step and then prints the results with a PROC step:\n\nDATA distance;\n    Miles = 26.22;\n    Kilometer = 1.61 * Miles;\n\nPROC PRINT DATA=distance;\nRUN;\n\nTo run the above program, click on the “Running Man” icon in SAS studio. You should obtain the output shown in Figure 6.3.\n\n\n\n\n\n\nFigure 6.3: SAS output\n\n\n\nThis dataset has only one observation (row).\n\nData steps start with the DATA keyword. This is followed by the name for the dataset. Procedures start with PROC followed by the name of the particular procedure (e.g. PRINT, SORT or PLOT) you wish to run on the dataset. Most SAS procedures have only a handful of possible statements. A step ends when SAS encounters a new step (marked by a DATA or PROC statement) or a RUN statement. RUN statements are not part of a DATA or PROC step; they are global statements.\n\nExample 6.2 (Creating a Dataset Inline) The following program explicitly creates a dataset within the DATA step.\n\n/*CREATING DATA MANUALLY:; */\n\nDATA ex_1;\nINPUT subject gender $ CA1 CA2 HW $;\nDATALINES;\n10 m 80 84 a\n7 m 85 89 a\n4 f 90 86 b\n20 m 82 85 b\n25 f 94 94 a\n14 f 88 84 c\n;\n\nPROC MEANS DATA=ex_1;\nVAR CA1 CA2;\nRUN;\n\nThe output for the above code is shown in Figure 6.4 and Figure 6.5.\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.4: Dataset output\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.5: Proc output\n\n\n\n\n\n\nIn the statements above, the $’s in the INPUT statement inform SAS that the preceding variables (gender and HW) are character. Note how the semi-colon for the DATALINES appears after all the data has been listed.\nPROC MEANS creates basic summary statistics for the variables listed.\n\nTo review, there are only 2 types of steps in SAS programs:\n\n\n\n\n\n\nDATA steps\n\nbegin with DATA statements.\nread and modify data.\ncreate a SAS dataset.\n\n\n\nPROC steps\n\nbegin with PROC statements.\nperform specific analysis or function.\nproduce reports or results.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to SAS</span>"
    ]
  },
  {
    "objectID": "06-intro_to_sas.html#basic-rules-for-sas-programs",
    "href": "06-intro_to_sas.html#basic-rules-for-sas-programs",
    "title": "6  Introduction to SAS",
    "section": "6.4 Basic Rules for SAS Programs",
    "text": "6.4 Basic Rules for SAS Programs\n\nFor SAS statements\n\nAll SAS statements (except those containing data) must end with a semicolon (;).\nSAS statements typically begin with a SAS keyword. (DATA, PROC).\nSAS statements are not case sensitive, that is, they can be entered in lowercase, uppercase, or a mixture of the two.\n\nExample : SAS keywords (DATA, PROC) are not case sensitive\n\nA delimited comment begins with a forward slash-asterisk (/) and ends with an asterisk-forward slash (/). All text within the delimiters is ignored by SAS.\n\n\n\nFor SAS names\n\nAll names must contain between 1 and 32 characters.\nThe first character appearing in a name must be a letter (A, B, … Z, a, b, …, z) or an underscore ( ). Subsequent characters must be letters, numbers, or underscores. That is, no other characters, such as $, %, or & are permitted.\nBlanks also cannot appear in SAS names.\nSAS names are not case sensitive, that is, they can be entered in lowercase, uppercase, or a mixture of the two. (SAS is only case sensitive within quotation marks.)\n\n\n\nFor SAS variables\n\nIf the variable in the INPUT statement is followed by a dollar sign ($), SAS assumes this is a character variable. Otherwise, the variable is considered as a numeric variable.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to SAS</span>"
    ]
  },
  {
    "objectID": "06-intro_to_sas.html#reading-data-into-sas",
    "href": "06-intro_to_sas.html#reading-data-into-sas",
    "title": "6  Introduction to SAS",
    "section": "6.5 Reading Data into SAS",
    "text": "6.5 Reading Data into SAS\nIn this topic, we shall introduce a new dataset, also from the UCI Machine Learning repository.\n\nExample 6.3 (Bike Rentals) \nThe dataset was collected by the authors in Fanaee-T and Gama (2013). It contains information on bike-sharing rentals in Washington D.C. USA for the years 2011 and 2012, along with measurements of weather. The original dataset contained hourly and daily aggregated data. For our class, we use a re-coded version of the daily data. Our dataset can be found on Canvas as bike2.csv.\nHere is the data dictionary:\n\n\n\n\n\n\n\nField\nDescription\n\n\n\n\ninstant\nRecord index\n\n\ndteday\nDate\n\n\nseason\nspring, summer, fall, winter)\n\n\nyr\nYear (0: 2011, 1: 2012)\n\n\nmnth\nAbbreviated month\n\n\nholiday\nWhether the day is a holiday or not\n\n\nweekday\nAbbreviated day of the week\n\n\nworkingday\nyes: If day is neither weekend nor holiday is 1, no: Otherwise\n\n\nweathersit\nWeather situation: clear: Clear, Few clouds, Partly cloudy, Partly cloudy; mist: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist; light_precip: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds; heavy_precip: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n\n\ntemp\nNormalized temperature in Celsius. Divided by 41 (max)\n\n\natemp\nNormalized feeling temperature in Celsius. Divided by 50 (max)\n\n\nhum\nNormalized humidity. Divided by 100 (max)\n\n\nwindspeed\nNormalized wind speed. Divided by 67 (max)\n\n\ncasual\nCount of casual users\n\n\nregistered\nCount of registered users\n\n\ncnt\nCount of total rental bikes including both casual and registered\n\n\n\nOur first step will be to load the dataset into SAS Studio.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to SAS</span>"
    ]
  },
  {
    "objectID": "06-intro_to_sas.html#uploading-and-using-datasets",
    "href": "06-intro_to_sas.html#uploading-and-using-datasets",
    "title": "6  Introduction to SAS",
    "section": "6.6 Uploading and Using Datasets",
    "text": "6.6 Uploading and Using Datasets\nTo use our own datasets on SAS Studio, we have to execute the following steps:\n\nCreate a new library. In SAS, a library is a collection of datasets. If you already have a library created, you can simply import datasets into it. The default library on SAS is called WORK. However, the datasets will be purged every time you sign out. Hence it is better to create a new one.\nImport your dataset (csv, xlsx, etc.) into the library.\nAfter this, the data will be available for use with the reference name &lt;library-name&gt;.&lt;dataset-name&gt;.\n\nFrom the “Libraries” menu on the left of SAS studio, click on the “New library” icon (the one circled in red in Figure 6.6), and create a new library called “ST2137”. You can use the default suggested path for the library.\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.6: New library\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.7: Upload data\n\n\n\n\n\n\nNow expand the menu for “Server Files and Folders” and upload bike2.csv file to SAS, using the circled icon in Figure 6.7.\nFinally, right-click on the top of the main Studio area (where we write code) and select “New Import Data”. Select the bike2.csv that has just been uploaded, and modify the OUTPUT DATA settings to Library ST2137 and Data set name BIKE2. Click on the running man, and your dataset is now ready for use in SAS studio!",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to SAS</span>"
    ]
  },
  {
    "objectID": "06-intro_to_sas.html#summarising-numerical-data",
    "href": "06-intro_to_sas.html#summarising-numerical-data",
    "title": "6  Introduction to SAS",
    "section": "6.7 Summarising Numerical Data",
    "text": "6.7 Summarising Numerical Data\nThe SAS routines we are going to work with can be found in the “Tasks and Utilities” section (see highlighted tasks in Figure 6.8).\n\n\n\n\n\n\nFigure 6.8: Common ST2137 Tasks\n\n\n\n\nNumerical Summaries\n\nExample 6.4 (5-number Summaries) \nWe expect that the total count of users will vary by the seasons. Hence, we begin by computing five-number summaries for each season.\nUnder Tasks, go to Statistcs &gt; Summary Statistics. Select cnt as the analysis variable, and season as the classification variable. Under the options tab, select the lower and upper quartiles, along with comparative boxplots. The output should look like this Figure 6.9:\n\n\n\n\n\n\nFigure 6.9: Summaries, Bike data\n\n\n\nWe observe that the median count is highest for fall, followed by summer, winter and lastly spring. The spreads, as measured by IQR, are similar across the seasons: approximately 2000 users. In the middle 50%, the count distribution for spring is the most right-skewed.\n\n\n\nScatter Plots\n\nExample 6.5 (Casual vs Registered Scatterplot) \nTo create a scatterplot in SAS, go to Tasks &gt; Graphs &gt; Scatter Plot.\nSpecify casual on the x-axis, registered on the y-axis, and workingday as the Group. You should observe the plot created Figure 6.10:\n\n\n\n\n\n\nFigure 6.10: Scatter plot, Bike Data\n\n\n\nWe can see that there seem to be two different relationships between the counts of casual and registered users. The two relationships correspond to whether it as a working day or not.\n\n\n\nHistograms\n\nExample 6.6 (Casual Users Distribution) \nNow suppose we focus on casual users, and study the distribution of counts by whether a day is a working day or not. To create a histogram, go to Tasks &gt; Graph &gt; Histogram. Select casual as the analysis variable, and workingday as the group variable.\n\n\n\n\n\n\nFigure 6.11: Histograms, Bike Data\n\n\n\nFrom Figure 6.11, we can see that the distribution is right-skewed in both cases. However, the range of counts for non-working days extends further, to about 3500.\n\n\n\nBoxplots\n\n\nExample 6.7 (Boxplots for Casual Users, by Season) In Example 6.4, we observed that total counts vary by users, and in Example 6.6, we observed that working days seem to have fewer casual users. Let us investigate if this difference is related to season.\nTo create boxplots, go to Tasks &gt; Box Plot. Select casual as the analysis variable, season as the category and workingday as the subcategory. You should obtain a plot like this Figure 6.12:\n\n\n\n\n\n\nFigure 6.12: Boxplots, Bike Data\n\n\n\nIn order to order the seasons according to the calendar, I had to add this line to the code:\n\nproc sgplot data=ST2137.BIKE2;\n    vbox casual / category=season group=workingday grouporder=ascending;\n    xaxis values=('spring' 'summer' 'fall' 'winter');\n    yaxis grid;\nrun;\n\nThere is little insight from the previous two examples. However, now try the same plots, but on the log scale (modify the APPEARANCE tab and re-run). You should now obtain Figure 6.13:\n\n\n\n\n\n\nFigure 6.13: Boxplots log scale, Bike Data\n\n\n\nNow, we can observe that the difference within each season, is constant across seasons. Because the difference in logarithms is constant, it means that, on the original scale, it is a constant multiplicative factor that increases counts from workingday to non-working day.\nWe have arrived at a more succint representation of the relationship by using the log transform.\n\n\n\nQQ-plots\n\n\nExample 6.8 (Normality Check for Humidity) To create QQ-plots, we go to Tasks &gt; Statistics &gt; Distribution Analysis.\nSelect hum for the analysis variable. Under options, add the normal curve, the kernel density estimate, and the Normal quantile-quantile plot. You should obtain the following two charts:\n\n\n\n\n\n\n\n\n\nHistogram for humidity\n\n\n\n\n\n\n\nQQ-plot for humidity\n\n\n\n\n\nThe plot shows that humidity values are quite close to a Normal distribution, apart from a single observation on the left.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to SAS</span>"
    ]
  },
  {
    "objectID": "06-intro_to_sas.html#categorical-data",
    "href": "06-intro_to_sas.html#categorical-data",
    "title": "6  Introduction to SAS",
    "section": "6.8 Categorical Data",
    "text": "6.8 Categorical Data\nWe now turn to categorical data methods with SAS. We return to the dataset on student performance that we used in the topic on summarising data. Upload and store student-mat.csv as ST2137.STUD_PERF on the SAS Studio website.\n\nExample 6.9 (\\(\\chi^2\\) Test for Independence) \nFor a test of independence of address and paid, go to Tasks &gt; Table Analysis, and select:\n\naddress as the column variable\npaid as the row variable.\nUnder OPTIONS, check the “Chi-square statistics” box.\n\nThe following output should enable you to perform the test (Figure 6.14 and Figure 6.15).\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.14: Observed & Expected Counts\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.15: Test statistic, p-value\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6.16: Mosaic Plot\n\n\n\n\n\n\n\nFor measures of association, we only need to select the option for “Measures of Association” to generate the Kendall \\(\\tau_b\\) that we covered earlier.\n\nExample 6.10 (Kendall \\(\\tau\\) for Walc and Dalc) \nOnce we load the data ST2137.STUD_PERF, we go to Tasks &gt; Table Analysis. After selecting the two variables, we check the appropriate box to obtain Figure 6.17.\n\n\n\n\n\n\nFigure 6.17: Walc vs Dalc\n\n\n\nYou may observe that the particular associations computed and returned are similar to those by the Desc R package that we used in ?exm-chest-pain-4.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to SAS</span>"
    ]
  },
  {
    "objectID": "06-intro_to_sas.html#references",
    "href": "06-intro_to_sas.html#references",
    "title": "6  Introduction to SAS",
    "section": "6.9 References",
    "text": "6.9 References",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to SAS</span>"
    ]
  },
  {
    "objectID": "06-intro_to_sas.html#sec-web-ref-06",
    "href": "06-intro_to_sas.html#sec-web-ref-06",
    "title": "6  Introduction to SAS",
    "section": "6.10 Website References",
    "text": "6.10 Website References\n\nSAS account sign-up Use this link to sign up for a SAS account.\nSAS Studio link Once you have activated your account, use this link to login to your SAS studio online.\nSAS Studio Help This link contains help on SAS studio features and commands.\n\n\n\n\n\nFanaee-T, Hadi, and Joao Gama. 2013. “Event Labeling Combining Ensemble Detectors and Background Knowledge.” Progress in Artificial Intelligence, 1–15. https://doi.org/10.1007/s13748-013-0040-3.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction to SAS</span>"
    ]
  }
]